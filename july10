## equilibrium position(index)
##left sum==right sum
class Solution(object):
    def pivotIndex(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        s=sum(nums)
        for i in range(len(nums)):
            s1=sum(nums[:i])
            if s1==s-s1-nums[i]:
                return i
        return -1

ouput
nums =[1,7,3,6,5,6]
index=3  at 6 (left sum=11 and right sum=11)

##Valid parenthesis
class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        d={'{':'}','[':']','(':')'}
        st=[]

        for i in range(len(s)):
            if s[i] in '({[':
                st.append(s[i])
            else:
                if len(st)>0:
                    top=st.pop()
                    if d[top]!=s[i]:
                        return False
                else:
                    return False
        if len(st)==0:
            return True
        return False

##swapping 2 numbers
a=10
b=20
a=a+b
b=a-b
a=a-b
print(a)
print(b)

output
20
10

##Cognizant previous year questions
E = int(input())
N = int(input())
a = list(map(int, input().split(" ")))
count =0
for i in range(N):
  for j in range(2):
    if a[i] <= E :
      E = E - a[i]
      count += 1 
    
if E == 0 : 
  print("-1")
else :
  print(count)

output
10
6
1 2 3 4 5 6
count=5

##factors,perfect number
def factors(n):
  l=[]
  for i in range(1,n):
    if n%i==0:
      l.append(i)
  print(l)
  if sum(l)==n:
    return True
  return False

print(factors(48))
print(factors(6))

output
[1, 2, 3, 4, 6, 8, 12, 16, 24]
False
[1, 2, 3]
True
------------
def isPerfectNumber(n):  
  factors = []
  for i in range(1, n//2+1):
    if n % i ==0 :
      factors.append(i)
  return sum(factors)  == n 
  
print(list(filter( isPerfectNumber, list(range(1,101)))))

output
[6,28]
------------------
##abundant number - (not an perfect number) (sum of all the factors<number)
def isAbundantNumber(n):  
  factors = []
  for i in range(1, n//2+1):
    if n % i ==0 :
      factors.append(i)
  return sum(factors)  < n 
  
print(list(filter( isAbundantNumber, list(range(1,101)))))

output
[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 21, 22, 23, 25, 26, 27, 29, 31, 32,
33, 34, 35, 37, 38, 39, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 
63, 64, 65, 67, 68, 69, 71, 73, 74, 75, 76, 77, 79, 81, 82, 83, 85, 86, 87, 89, 91, 92, 
93, 94, 95, 97, 98, 99]

##Automorphic number
from math import log10
def isAutomorphic(number):
  n = int( log10(number)) + 1
  square = number * number 
  s = str(square)
  size = len(s)
  return number == int(s[size-n:])
  
n1  = list(filter(isAutomorphic, list(range(1, 1001))))
n2 = [ x**2 for x in n1]

print(n1)
print(n2)

output
[1, 5, 6, 25, 76, 376, 625]
[1, 25, 36, 625, 5776, 141376, 390625]

from math import log10
def isAutomorphic(number):
  n = int( log10(number)) + 1
  square = number * number 
  total, base  = 0, 1
  while n != 0 :
    digit = square % 10 
    total = total + digit * base 
    base = base *10
    squre = square // 10 
    n = n-1
  return number == total 
    
  
n1  = list(filter(isAutomorphic, list(range(1, 1001))))
n2 = [ x**2 for x in n1]

print(n1)
print(n2)


Output:

[1, 5, 6, 11, 55, 66, 111, 555, 666]
[1, 25, 36, 121, 3025, 4356, 12321, 308025, 443556]



        
