##min cost path
import numpy as np
def minCostPath(matrix):
  m, n = len(matrix), len(matrix[0])
  sol = [[0 for j in range(n)] for i in range(m)]
  sol[0][0] = 1
  
  for j in range(1, n):
    sol[0][j] = sol[0][j-1] + matrix[0][j]
  for i in range(1, m):
    sol[i][0] = sol[i-1][0] + matrix[i][0]
    
  for i in range(1, m):
    for j in range(1, n):
      sol[i][j] = min(sol[i-1][j], sol[i][j-1]) + matrix[i][j]
  
  print(np.matrix(sol))
  return sol[m-1][n-1]

matrix = [[1,2,3,4],
          [5,6,7,8],
          [4,5,6,7],
          [2,9,8,7]]
print(np.matrix(matrix))
print(minCostPath(matrix))


Output:

[[1 2 3 4]
 [5 6 7 8]
 [4 5 6 7]
 [2 9 8 7]]
[[ 1  3  6 10]
 [ 6  9 13 18]
 [10 14 19 25]
 [12 21 27 32]]
32


##Total paths to reach the destination
import numpy as np
grid = [[0,0,0],
        [0,0,0],
        [0,0,0]]
def totalPaths(i,j):
  m, n = len(grid), len(grid[0])
  dp = [[0 for j in range(n)] for i in range(m)]
  dp[0][0] = 1 if grid[0][0] == 0 else 0
  for j in range(1, n):
    dp[0][j] = 1 if dp[0][j-1] ==1 and grid[0][j] == 0 else 0
  for i in range(1, m):
    dp[i][0] = 1 if dp[i-1][0] ==1 and grid[i][0] == 0 else 0
  for i in range(1, m):
    for j in range(1, n):
      dp[i][j] = dp[i-1][j] + dp[i][j-1] if grid[i][j] == 0 else 0
    
  print(np.matrix(dp))
  return 0
print(totalPaths(0,0))


Output:

[[1 1 1]
 [1 2 3]
 [1 3 6]]
0


##max money robbery in the house
money = [5,7,2,10,15]
def getMaxProfit(n):
  dp = [0 for i in range(n)]
  dp[0] = money[0]
  dp[1] = max(money[0], money[1])
  for i in range(2, n):
    dp[i] = max(dp[i-2] + money[i], dp[i-1])
  print(dp)
  return dp[n-1]
  
n = len(money)
print(money)
print(getMaxProfit(n))

Output:
[5, 7, 2, 10, 15]
[5, 7, 7, 17, 22]
22

##No.of steps to climb 
jumps = [1,2,3]
def fun(n):
  if n==0 :
    return 1 
  nWays = 0
  for jump in jumps :
    if n - jump >= 0 :
      nWays = nWays + fun(n-jump)
  return nWays 
print(fun(5))

Output
13

##Dynamic programming
jumps = [1,2,3]

  
def gun(n):
  dp = [ 0 for i in range(n+1)]
  dp[0] = 1 
  for i in range(1, n+1):
    for jump in jumps :
      if i - jump >= 0:
        dp[i] = dp[i] + dp[i-jump]
  print(dp)
  return dp[n]
print(gun(5))

Output:

[1, 1, 2, 4, 7, 13]
13


coins = [2,5]
def fun (amount):
  if amount == 0:
    return 0
  if amount <0:
    return float("inf")
  minCoins = float("inf")
  for coin in coins :
    minCoins = min(minCoins, 1 + fun(amount-coin))
  return minCoins
    
n =fun(3)
print( n if n != float("inf") else -1)

output
-1

#denomination coins
coins = [1,2,3]
def getMinCoins(amount):
  dp = [float("inf") for i in range(amount+1)]
  dp[0] = 0
  for i in range(1, amount+1):
    for coin in coins :
      if (i - coin) >= 0:
        dp[i] = min( dp[i], 1 + dp[i-coin])
  print(dp)
  return dp[i] if dp[i] < float("inf") else -1
  
print(getMinCoins(6))

Output:

-1
