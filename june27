#wines problem
#three wines with prices 2,3,5 year=1,right=2
def wineSelling(prices,right,left=0,year=1):
  if(left==right):
      return year*prices[left]
  else:
      opt1=year*prices[left]+wineSelling(prices,right,left+1,year+1)
      opt2=year*prices[right]+wineSelling(prices,right-1,left,year+1)
      return max(opt1,opt2)
prices=[2,3,5,1,4]
maxprofit=wineSelling(prices,len(prices)-1)
print(maxprofit)

output
50
##house robber problem
Theif cant robber in adjacent houses
def houserobber(money,n,i=0):    # n=no of houses
    if i>n-1:
        return 0
    else:
        opt1=money[i]+houserobber(money,n,i+2)
        opt2=houserobber(money,n,i+1)
        return max(opt1,opt2)
money=[2,1,6,9,11,2]
money=[6,7,1,3,8,2,4]   #(7+8+4)=19
print(houserobber(money,len(money)))

output
19---(2+6+11)



def wineSell(prices, right, left =0, year = 1):
  if(left == right ):
    return year * prices[left]
  else :
    opt1 = year*prices[left] + wineSell(prices, right, left+1, year+1)
    opt2 = year*prices[right] + wineSell(prices, right-1, left, year+1)
    return max(opt1, opt2)
    
def getMaxProfit(money, n, i =0):
  if i > n-1 :
    return 0
  else :
    opt1 = money[i] + getMaxProfit(money, n, i+2)
    opt2 = getMaxProfit(money, n, i+1)
    return max(opt1, opt2)

def getMaxProfit2(money):
  n = len(money)
  arr1 = money[0:-1]
  arr2 = money[1:]
  print(arr1)
  print(arr2)
  sub1 = getMaxProfit(arr1, len(arr1), i=0)
  sub2 = getMaxProfit(arr2, len(arr2), i=0)
  print(sub1, sub2)
  return max(sub1, sub2)
  
    
money  = [6,7,1,3,8,2,4]
maxProfit = getMaxProfit2(money)
print(maxProfit)

[6, 7, 1, 3, 8, 2]
[7, 1, 3, 8, 2, 4]
15 19
19

##min cost
def minCostPath(matrix, m, n, i =0, j=0):
  if (i == m-1 and j == n-1):
    return matrix[i][j]
  elif (i == m-1):
    return matrix[i][j] + minCostPath(matrix, m,n, i, j+1)
  elif (j == n-1):
    return matrix[i][j] + minCostPath(matrix, m, n, i+1, j)
  else :
    opt1 = matrix[i][j] + minCostPath(matrix, m,n, i, j+1)
    opt2 = matrix[i][j] + minCostPath(matrix, m, n, i+1, j)
    return min(opt1, opt2)

matrix  = [[2,7,8],
           [5,4,9],
           [9,3,7]]
m, n = len(matrix),len(matrix[0]) 
minCost = minCostPath(matrix, m, n)
print(minCost)

output
21

## Total paths
def getTotalPaths(matrix, m, n, i=0, j=0):
  if (i > m-1 or j > n-1 or matrix[i][j] == 1) :
    return 0 
  elif (i == m-1 and j == n-1 ):
    return 1
  else :
    nopathsRight = getTotalPaths(matrix, m, n, i, j+1)
    nopathsDown = getTotalPaths(matrix, m, n, i+1, j)
    totalPaths = nopathsRight + nopathsDown
    return totalPaths

matrix  = [[0,1,0],
           [0,0,0],
           [0,0,0]]
m, n = len(matrix),len(matrix[0]) 
totalPaths = getTotalPaths(matrix, m, n)
print(totalPaths)

Output
3  

#goldmine
def goldMine(matrix):
  m,n = len(matrix), len(matrix[0])
  maxProfit = 0
  i =0
  for j in range(0, n):
    profit = getProfit(matrix, m, n, 0, j)
    maxProfit = max(maxProfit, profit)
  return maxProfit 

def getProfit(matrix, m, n, i, j):
  if( i > m-1 or j < 0 or j > n-1 ):
    return 0
  else :
    left = matrix[i][j] + getProfit(matrix, m, n, i+1, j-1)
    middle=matrix[i][j] + getProfit(matrix, m, n, i+1, j)
    right =matrix[i][j] + getProfit(matrix, m, n, i+1, j+1)
    return max(left, middle, right);
  
matrix = [[10, 33, 13, 15],
          [22, 21,  4,  1], 
          [ 5,  1,  2,  3], 
          [ 1,  6, 14,  2]]
maxGold = goldMine(matrix)
print(maxGold)

output
70

##circular rotation
def  ccwRotation(s):
  s = list(s)
  n = len(s)
  prev = s[n-1]
  i = n-3 
  while i >= 0:
    prev,s[i]=s[i],prev 
    i = i-2 
  return "".join(s) 

s = "abcdefgh";
print(s)
s = ccwRotation(s)
print(s)

##circular primes
def getCircularPrimes(numbers):
  circularPrimes = []
  for number in numbers :
    s = str(number)
    k =0 
    for i in range(len(s)):
      rotn = s[i:] + s[:i]
      num = int(rotn)
      if isPrime(num):
        k = k+1 
    if k == len(s):
      circularPrimes.append(number)
  return circularPrimes
  
def isPrime(n):
  if n == 1:
    return False 
  i = 2 
  while i <= int ( n**0.5):
    if n % i == 0 :
      return False 
    i = i + 1 
  return True
   
numbers = [1234, 789, 197, 337, 79, 123]
cPrimes = getCircularPrimes(numbers)
print(cPrimes)

Output
[197, 337, 79]
    
  


  




          
