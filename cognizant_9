##converting from s2 to s1 only for adding an character increment the count
s1=input()
s2=input()
d1={}
d2={}
for i in s1:
  if i in d1:
    d1[i]+=1
  else:
    d1[i]=1
for i in s2:
  if i in d2:
    d2[i]+=1
  else:
    d2[i]=1
k=0
for ch,val in d2.items():
  if ch in s1:
    if d1[ch]<d2[ch]:
      k=k+(d2[ch]-d1[ch])
  else:
    k+=1

      
print(d1)
print(d2)
print(k)

output
abczy
xyz

STDIN
Output:

{'a': 1, 'b': 1, 'c': 1, 'z': 1, 'y': 1}
{'x': 1, 'y': 1, 'z': 1}
1

##printing the consonants
##keeping the consonants in another string and printing it 
s1=input()
s2=""
for i in range(len(s1)):
  if s1[i] not in 'aeiouAEIOU':
    s2=s2+s1[i]
print(s2)

output
auspicious

spcs

##deleting the characters using 1 list
s1=input()
s1=[i for i in s1]
i=0
n=len(s1)
while i<n:
  if s1[i] in 'aeiouAEIOU':
    del(s1[i])
    n-=1
  else:
    i+=1
print(''.join(s1))

##maximum permutation countable strings after removing all the vowels from every element of the string array
import math
def perm(s1):
  s1=[i for i in s1]
  i=0
  l=[]
  n=len(s1)
  while i<n:
    if s1[i] in 'aeiouAEIOU':
      del(s1[i])
      n-=1
    else:
      i+=1
  return [''.join(s1),math.factorial(len(s1))]
s=input().split(',')
for i in range(len(s)):
  print(perm(s[i]))

input
auspicious,beautiful,entrepreneur,university,aeroplane


Output:

['spcs', 24]
['btfl', 24]
['ntrprnr', 5040]
['nvrsty', 720]
['rpln', 24]

##ugly number
import math
def isprime(n):
  if n==2:
    return True
  elif n<2 or n%2==0:
    return False
  else:
    for i in range(3,int(math.sqrt(n))+1):
      if n%i==0:
        return False
  return True
n = int(input())
k=0
l=[]
if n==1:
  print("Ugly Number")
else:
  for i in range(1,n+1):
    if n%i==0 and isprime(i):
      l.append(i)
  for i in l:
    if i<=5:
      k+=1
  if k==len(l):
    print("Ugly number")
  else:
    print("Not an ugly number")

output
15
STDIN
Output:

Ugly number

##alphabetical charcaters replace all the digits with '*'
s=input()
s=[i for i in s]
for i in range(len(s)):
  if chr(ord(s[i])).isdigit():
    s[i]='*'
print(''.join(s))

abc1d10
abc*d**
    
##threading
import threading 
import time  
def print1(name, n):
  print(" {} is running ".format(name))
  for i in range(n):
    print(i)
    time.sleep(2)
    

def print2(name, strings):
  print(" {} is running ".format(name))
  for string in strings:
    print(string)
    time.sleep(2)
t1 = threading.Thread(target = print1, 
                      args = ["numbers", 10])
t2 = threading.Thread(target = print2,  
                      args =["strings",["a", "b", "c", "d", "e", "f"]] )
                      
t1.start();
t2.start();

t1.join()
t2.join()
print(" both threads finisshed running ")

output
numbers is running 
0
 strings is running 
a
1
b
2
c
3
d
4
e
5
f
6
7
8
9
 both threads finisshed running 

##without join
import threading 
import time  
def print1(name, n):
  print(" {} is running ".format(name))
  for i in range(n):
    print(i)
    time.sleep(2)
    

def print2(name, strings):
  print(" {} is running ".format(name))
  for string in strings:
    print(string)
    time.sleep(2)
t1 = threading.Thread(target = print1, 
                      args = ["numbers", 10])
t2 = threading.Thread(target = print2,  
                      args =["strings",["a", "b", "c", "d", "e", "f"]] )
                      
t1.start();
t2.start();

print(" both threads finisshed running ")

output
 numbers is running 
0
 strings is running 
a
 both threads finisshed running 
1
b
2
c
d
3
4e

f
5
6
7
8
9






  
      
    


