def Print1(i = 1, n = 10):
  if i < n :
    Print1(i+1, n)
  print(i)
Print1()
Output:

10
9
8
7
6
5
4
3
2
1
def Print2(i =1, n= 10):
  print(i)
  if i < n :
    Print2(i+1, n)
Print2()

output
1
2
3
4
5
6
7
8
9
10

def fun1(i=1, n=12, steps = 0):
  if ( i > n):
    return float("inf")
  if (i == n):
    return steps
  return min ( fun1(i+1, n, steps+1), fun1(2*i, n, steps+1))

#No.of min steps   
def fun3(n=12 ):
  steps = 0
  while n > 0:
    if n % 2 == 0:
      n = n//2 
    else :
      n = n-1 
    steps = steps + 1 
  return steps
  

  
def fun2(x:int, y:int, X:int, Y:int) ->int :
  if (x > X or y > Y):
    return False 
  if x == X and y == Y:
    return True 
  return fun2(x+y, y, X, Y) or fun2(x, x+y, X,Y)

print(fun3())


##min boats and weights of the persons given
  
def minBoats(weights, limit):
  if max(weights) > limit :
    rerturn -1
  elif sum(weights)%limit==0:
    return sum(weights)/limit
  else:
    return int(sum(weights)/limit)+1
weights = [1,3,1,2,1,4,1,5,1,6,2,1]
limit = 6 
print(minBoats(weights, limit))

output
5

#permutations
def getPerm(s, res):
  if( len(s) == 0) :
    permutations.append(res)
    return 
  for i in range(len(s)):
    left = s[:i]
    right = s[i+1:]
    remaining = left + right 
    getPerm(remaining, res + s[i])
  return 


permutations = []
s = [1,2,3]
s = "".join([ str(i) for i in s])
res = ""
getPerm(s, res)
print(permutations)
output
['123', '132', '213', '231', '312', '321']

#ranks based on the amrks of the student
def fun4(marks):
  indices = list(range(len(marks)))
  sorted_indices = sorted( indices, key = lambda i : marks[i] )
  return sorted_indices
import numpy as np 
marks = np.random.randint(30,70, 10)
print(marks)
sorted_indices = fun4(marks)
print(sorted_indices)

output
[37 38 63 46 55 52 58 41 40 55]
[0, 1, 8, 7, 3, 5, 4, 9, 6, 2]






