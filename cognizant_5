##removing the k digits from the number to make the number as minimum
n=int(input())
k=int(input())
l=[int(i) for i in str(n)]
st=[]
if len(str(n))<k or n<0:
  print("-1")
elif len(str(n))==k:
  print("0")
else:
  for i in range(len(l)):
    while k>0 and st!=[] and st[-1]>l[i]:
      st.pop()
      k-=1
    st.append(l[i])
  while k>0 and st!=[]:
    st.pop()
    k-=1
  st="".join(map(str,st)).lstrip('0')
  print(st)

output
1432219
3
STDIN
Output:

1219

##sum of the product of index and ascii value of character in the string the index starts with 1 
s=input()
t=0
for i in range(1,len(s)+1):
  t=t+i*ord(s[i-1])
  print(i,ord(s[i-1]))
print(t)

output
james
STDIN
Output:

1 106
2 97
3 109
4 101
5 115
1606

JAMES
1126

abc
STDIN
Output:

1 97
2 98
3 99
590

s=input()
t=0
for index,ch in enumerate(s):
  t=t+(index+1)*ord(ch)
print(t)

##length of longest common palindromic subsequence
import numpy as np
def fun(s):
  n = len(s)
  dp = [ [0 for j in range (n)] for i in range(n)] 
  # case 1 - string of length 1 
  for i in range(n):
    dp[i][i] =1
  #case 2 = string of length 2 
  for i in range(0, n-1):
    if s[i] == s[i+1]:
      dp[i][i+1] = 2
    else :
      dp[i][i+1] = 1
  
  for length in range(3, n+1):
    for i in range(0, n - length+1):
      j = i + length - 1
      if s[i] == s[j]:
        dp[i][j] = 2 + dp[i+1][j-1]
      else :
        dp[i][j] = max(dp[i+1][j], dp[i][j-1])
  print(np.matrix(dp))
  return dp[0][n-1]

string = input()
res = fun(string)
print(f"res = {res}")

output
eaten
STDIN
Output:

[[1 1 1 3 3]
 [0 1 1 1 1]
 [0 0 1 1 1]
 [0 0 0 1 1]
 [0 0 0 0 1]]
res = 3


##mcqs
nums = [10, 7, 17, 18, 13, 12]
it = iter(nums)
print( next(it))
print( next(it))
print( next(it))
print( next(it))
print( next(it))

output
10
7
17
18
13

#for sets the order will be changed randomly it will print the elements
nums = {10, 7, 17, 18, 13, 12}
it = iter(nums)
print( next(it))
print( next(it))
print( next(it))
print( next(it))
print( next(it))

output
10
7
17
18
13

#kadens algorithm(maximum subarray sum)
arr=list(map(int,input().split()))
m=arr[0]
res=0
for i in range(1,len(arr)):
  m=max(m+arr[i],arr[i])
  res=max(res,m)
print(res)

output
2 -5 10 -6 7 -2
STDIN
Output:

11

a = float(input())
print(a)

1
output
1.0

a = int(input())
print(a)

output
1.0
STDIN
Output:

Traceback (most recent call last):
  File "/main.py", line 1, in <module>
    a = int(input())
        ^^^^^^^^^^^^
ValueError: invalid literal for int() with base 10: '1.0'


int  -- 2 to 4 bytes 
float  --- 4 bytes
higher size date cant be fitted in lower size datatype like float cant be fitted in int


##exception handling
try block throws the exception then catch block statement will be executed




  

